setup: |
  echo "🐊 Attempt to install software engineering tools"
  echo "🐊 Will not re-install if already installed"
  poetry install
---

# Honor Code {{{

- ../README.md:
    - description: Ensure that the README.md file exists inside of the root of the GitHub repository
      check: ConfirmFileExists
    - description: Delete the phrase 'Add Your Name Here' and add your own name as an Honor Code pledge in README.md
      check: MatchFileFragment
      options:
        fragment: "Add Your Name Here"
        count: 0
        exact: true
    - description: Retype the every word in the Honor Code pledge in README.md
      check: MatchFileFragment
      options:
        fragment: "I adhered to the Allegheny College Honor Code while completing this examination."
        count: 3
        exact: true
    - description: Indicate that you have completed all of the tasks in the README.md
      check: MatchFileFragment
      options:
        fragment: "- [X]"
        count: 10
        exact: true

# }}}

# Basic Program Characteristics {{{

# Question 1

# perform checks on the program file
- questions/question_one.py:
    # --> file exists in the correct directory
    - description: Ensure that question_one.py file exists in the questions/ directory
      check: ConfirmFileExists
    # --> no remaining TODO markers in the source code
    - description: Complete all TODOs, remove the TODO markers, and rewrite comments for question_one.py
      check: MatchFileFragment
      options:
        fragment: TODO
        count: 0
        exact: true



    # --> contains suitable number of docstrings for both module and the function (note, differs from symbex)
    - description: Create a sufficient number of docstring (i.e., multiple-line) comments in question_one.py
      check: CountMultipleLineComments
      options:
        language: "Python"
        count: 4
        exact: true

# perform checks on the test file
- tests/test_question_one.py:
    # --> file exists in the correct directory
    - description: Ensure that test_question_one.py file exists in the tests/ directory
      check: ConfirmFileExists

# Question 2

# perform checks on the program file
- questions/question_two.py:
    # --> file exists in the correct directory
    - description: Ensure that question_two.py file exists in the questions/ directory
      check: ConfirmFileExists
    # --> no remaining TODO markers in the source code
    - description: Complete all TODOs, remove the TODO markers, and rewrite comments for question_two.py
      check: MatchFileFragment
      options:
        fragment: TODO
        count: 0
        exact: true
    # --> contains suitable number of docstrings for both module and the function (note, differs from symbex)
    - description: Create a sufficient number of docstring (i.e., multiple-line) comments in question_two.py
      check: CountMultipleLineComments
      options:
        language: "Python"
        count: 4
        exact: true

# perform checks on the test file
- tests/test_question_two.py:
    # --> file exists in the correct directory
    - description: Ensure that test_question_two.py file exists in the tests/ directory
      check: ConfirmFileExists

# Question 3

# perform checks on the program file
- questions/question_three.py:
    # --> file exists in the correct directory
    - description: Ensure that question_three.py file exists in the questions/ directory
      check: ConfirmFileExists
    # --> no remaining TODO markers in the source code
    - description: Complete all TODOs, remove the TODO markers, and rewrite comments for question_three.py
      check: MatchFileFragment
      options:
        fragment: TODO
        count: 0
        exact: true
    # --> contains suitable number of docstrings for both module and the function (note, differs from symbex)
    - description: Create a sufficient number of docstring (i.e., multiple-line) comments in question_three.py
      check: CountMultipleLineComments
      options:
        language: "Python"
        count: 4
        exact: true

# perform checks on the test file
- tests/test_question_three.py:
    # --> file exists in the correct directory
    - description: Ensure that test_question_three.py file exists in the tests/ directory
      check: ConfirmFileExists

# Question 4

# perform checks on the program file
- questions/question_four.py:
    # --> file exists in the correct directory
    - description: Ensure that question_four.py file exists in the questions/ directory
      check: ConfirmFileExists
    # --> no remaining TODO markers in the source code
    - description: Complete all TODOs, remove the TODO markers, and rewrite comments for question_four.py
      check: MatchFileFragment
      options:
        fragment: TODO
        count: 0
        exact: true
    # --> contains suitable number of docstrings for both module and the function (note, differs from symbex)
    - description: Create a sufficient number of docstring (i.e., multiple-line) comments in question_four.py
      check: CountMultipleLineComments
      options:
        language: "Python"
        count: 7
        exact: true

# perform checks on the test file
- tests/test_question_four.py:
    # --> file exists in the correct directory
    - description: Ensure that test_question_four.py file exists in the tests/ directory
      check: ConfirmFileExists

# Question 5

# perform checks on the program file
- questions/question_five.py:
    # --> file exists in the correct directory
    - description: Ensure that question_five.py file exists in the questions/ directory
      check: ConfirmFileExists
    # --> no remaining TODO markers in the source code
    - description: Complete all TODOs, remove the TODO markers, and rewrite comments for question_ffive.py
      check: MatchFileFragment
      options:
        fragment: TODO
        count: 0
        exact: true
    # --> contains suitable number of docstrings for both module and the function (note, differs from symbex)
    - description: Create a sufficient number of docstring (i.e., multiple-line) comments in question_five.py
      check: CountMultipleLineComments
      options:
        language: "Python"
        count: 10
        exact: false

# perform checks on the test file
- tests/test_question_five.py:
    # --> file exists in the correct directory
    - description: Ensure that test_question_four.py file exists in the tests/ directory
      check: ConfirmFileExists

# Question 6

# perform checks on the program file
- questions/question_six.py:
    # --> file exists in the correct directory
    - description: Ensure that question_six.py file exists in the questions/ directory
      check: ConfirmFileExists
    # --> no remaining TODO markers in the source code
    - description: Complete all TODOs, remove the TODO markers, and rewrite comments for question_six.py
      check: MatchFileFragment
      options:
        fragment: TODO
        count: 0
        exact: true
    # --> contains suitable number of docstrings for both module and the function (note, differs from symbex)
    - description: Create a sufficient number of docstring (i.e., multiple-line) comments in question_six.py
      check: CountMultipleLineComments
      options:
        language: "Python"
        count: 9
        exact: false

# perform checks on the test file
- tests/test_question_six.py:
    # --> file exists in the correct directory
    - description: Ensure that test_question_six.py file exists in the tests/ directory
      check: ConfirmFileExists

# Question 7

# perform checks on the program file
- questions/question_seven.py:
    # --> file exists in the correct directory
    - description: Ensure that question_seven.py file exists in the questions/ directory
      check: ConfirmFileExists
    # --> no remaining TODO markers in the source code
    - description: Complete all TODOs, remove the TODO markers, and rewrite comments for question_seven.py
      check: MatchFileFragment
      options:
        fragment: TODO
        count: 0
        exact: true
    # --> contains suitable number of docstrings for both module and the function (note, differs from symbex)
    - description: Create a sufficient number of docstring (i.e., multiple-line) comments in question_seven.py
      check: CountMultipleLineComments
      options:
        language: "Python"
        count: 8
        exact: false

# perform checks on the test file
- tests/test_question_seven.py:
    # --> file exists in the correct directory
    - description: Ensure that test_question_seven.py file exists in the tests/ directory
      check: ConfirmFileExists

# Question 8

# perform checks on the program file
- questions/question_eight.py:
    # --> file exists in the correct directory
    - description: Ensure that question_eight.py file exists in the questions/ directory
      check: ConfirmFileExists
    # --> no remaining TODO markers in the source code
    - description: Complete all TODOs, remove the TODO markers, and rewrite comments for question_eight.py
      check: MatchFileFragment
      options:
        fragment: TODO
        count: 0
        exact: true
    # --> contains suitable number of docstrings for both module and the function (note, differs from symbex)
    - description: Create a sufficient number of docstring (i.e., multiple-line) comments in question_eight.py
      check: CountMultipleLineComments
      options:
        language: "Python"
        count: 4
        exact: false

# perform checks on the test file
- tests/test_question_eight.py:
    # --> file exists in the correct directory
    - description: Ensure that test_question_eight.py file exists in the tests/ directory
      check: ConfirmFileExists

# }}}

# Program Output {{{

# Question 1

- description: Run checks for Question 1 Part (a) with 'execexam' command and confirm correct exit code
  command: poetry run execexam . tests/ --verbose --mark "question_one_part_a"
  objectives:
    LO1:
      degree:
        - CS: "I"
          rationale: "Manipulate the matrix data structure"
    LO5:
      degree:
        - CS: "D"
          rationale: "Search a matrix and compute summary values based on matrix"

- description: Run checks for Question 1 Part (b) with 'execexam' command and confirm correct exit code
  command: poetry run execexam . tests/ --verbose --mark "question_one_part_b"
  objectives:
    LO1:
      degree:
        - CS: "I"
          rationale: "Manipulate the matrix data structure"
    LO5:
      degree:
        - CS: "D"
          rationale: "Search a matrix and compute summary values based on matrix"

- description: Run checks for Question 1 Part (c) with 'execexam' command and confirm correct exit code
  command: poetry run execexam . tests/ --verbose --mark "question_one_part_c"
  objectives:
    LO1:
      degree:
        - CS: "I"
          rationale: "Manipulate the matrix data structure"
    LO5:
      degree:
        - CS: "D"
          rationale: "Search a matrix and compute summary values based on matrix"

# Question 2

- description: Run checks for Question 2 Part (a) with 'execexam' command and confirm correct exit code
  command: poetry run execexam . tests/ --verbose --mark "question_two_part_a"
  objectives:
    LO1:
      degree:
        - CS: "I"
          rationale: "Reverse a string"

- description: Run checks for Question 2 Part (b) with 'execexam' command and confirm correct exit code
  command: poetry run execexam . tests/ --verbose --mark "question_two_part_b"
  objectives:
    LO1:
      degree:
        - CS: "I"
          rationale: "Reverse a string-based encoding of an integer"

- description: Run checks for Question 2 Part (c) with 'execexam' command and confirm correct exit code
  command: poetry run execexam . tests/ --verbose --mark "question_two_part_c"
  objectives:
    LO1:
      degree:
        - CS: "I"
          rationale: "Encode results of a computation in a nested dictionary"

# Question 3

- description: Run checks for Question 3 Part (a) with 'execexam' command and confirm correct exit code
  command: poetry run execexam . tests/ --verbose --mark "question_three_part_a"
  objectives:
    LO5:
      degree:
        - CS: "D"
          rationale: "Perform a summation on a list of integers"

- description: Run checks for Question 3 Part (b) with 'execexam' command and confirm correct exit code
  command: poetry run execexam . tests/ --verbose --mark "question_three_part_b"
  objectives:
    LO5:
      degree:
        - CS: "D"
          rationale: "Perform a summation on a list of floating-point values"

- description: Run checks for Question 3 Part (c) with 'execexam' command and confirm correct exit code
  command: poetry run execexam . tests/ --verbose --mark "question_three_part_c"
  objectives:
    LO5:
      degree:
        - CS: "D"
          rationale: "Perform a summation with select data in a list of dictionaries"

# Question 4

- description: Run checks for Question 4 Part (a) with 'execexam' command and confirm correct exit code
  command: poetry run execexam . tests/ --verbose --mark "question_four_part_a"
  objectives:
    LO1:
      degree:
        - CS: "I"
          rationale: "Use the set data structure to detect duplicate integer values"
    LO5:
      degree:
        - CS: "D"
          rationale: "Detect duplicate values in a list of integers"

- description: Run checks for Question 4 Part (b) with 'execexam' command and confirm correct exit code
  command: poetry run execexam . tests/ --verbose --mark "question_four_part_b"
  objectives:
    LO1:
      degree:
        - CS: "I"
          rationale: "Use the set data structure to detect duplicate string values"
    LO5:
      degree:
        - CS: "D"
          rationale: "Detect duplicate values in a list of strings"

- description: Run checks for Question 4 Part (c) with 'execexam' command and confirm correct exit code
  command: poetry run execexam . tests/ --verbose --mark "question_four_part_c"
  objectives:
    LO1:
      degree:
        - CS: "I"
          rationale: "Detect duplicate values in a list of Gene objects"
    LO5:
      degree:
        - CS: "D"
          rationale: "Use nested iteration constructs to detect duplicate Genes"

# Question 5

- description: Run checks for Question 5 Part (a) with 'execexam' command and confirm correct exit code
  command: poetry run execexam . tests/ --verbose --mark "question_five_part_a"
  objectives:
    LO1:
      degree:
        - CS: "I"
          rationale: "Implement a stack data structure using a list"

- description: Run checks for Question 5 Part (b) with 'execexam' command and confirm correct exit code
  command: poetry run execexam . tests/ --verbose --mark "question_five_part_b"
  objectives:
    LO1:
      degree:
        - CS: "I"
          rationale: "Use the double-ended queue to process documents in a list"

- description: Run checks for Question 5 Part (c) with 'execexam' command and confirm correct exit code
  command: poetry run execexam . tests/ --verbose --mark "question_five_part_c"
  objectives:
    LO1:
      degree:
        - CS: "I"
          rationale: "Use the priority queue to process documents in a list"

# Question 6

- description: Run checks for Question 6 Part (a) with 'execexam' command and confirm correct exit code
  command: poetry run execexam . tests/ --verbose --mark "question_six_part_a"
  objectives:
    LO1:
      degree:
        - CS: "I"
          rationale: "Process a list of integer values"
    LO5:
      degree:
        - CS: "D"
          rationale: "Sort a list of integer values"

- description: Run checks for Question 6 Part (b) with 'execexam' command and confirm correct exit code
  command: poetry run execexam . tests/ --verbose --mark "question_six_part_b"
  objectives:
    LO1:
      degree:
        - CS: "I"
          rationale: "Process a lists of string values"
    LO5:
      degree:
        - CS: "D"
          rationale: "Sort a list of string values"

- description: Run checks for Question 6 Part (c) with 'execexam' command and confirm correct exit code
  command: poetry run execexam . tests/ --verbose --mark "question_six_part_c"
  objectives:
    LO1:
      degree:
        - CS: "I"
          rationale: "Process a list of complex Gene objects"
    LO5:
      degree:
        - CS: "D"
          rationale: "Sort a list of Gene objects"

# Question 7

- description: Run checks for Question 7 Part (a) with 'execexam' command and confirm correct exit code
  command: poetry run execexam . tests/ --verbose --mark "question_seven_part_a"
  objectives:
    LO1:
      degree:
        - CS: "I"
          rationale: "Use a stack to process a tree"
    LO5:
      degree:
        - CS: "D"
          rationale: "Implement a depth-first traversal of a tree"

- description: Run checks for Question 7 Part (b) with 'execexam' command and confirm correct exit code
  command: poetry run execexam . tests/ --verbose --mark "question_seven_part_b"
  objectives:
    LO1:
      degree:
        - CS: "I"
          rationale: "Use a queue to process a tree"
    LO5:
      degree:
        - CS: "D"
          rationale: "Implement a breadth-first traversal of a tree"

- description: Run checks for Question 7 Part (c) with 'execexam' command and confirm correct exit code
  command: poetry run execexam . tests/ --verbose --mark "question_seven_part_c"
  objectives:
    LO1:
      degree:
        - CS: "I"
          rationale: "Use a list to store the depths of nodes in tree"
    LO5:
      degree:
        - CS: "D"
          rationale: "Calculate the height of a tree"

# Question 8

- description: Run checks for Question 8 Part (a) with 'execexam' command and confirm correct exit code
  command: poetry run execexam . tests/ --verbose --mark "question_eight_part_a"
  objectives:
    LO5:
      degree:
        - CS: "D"
          rationale: "Implement a recursive binary search with list slicing"

- description: Run checks for Question 8 Part (b) with 'execexam' command and confirm correct exit code
  command: poetry run execexam . tests/ --verbose --mark "question_eight_part_b"
  objectives:
    LO5:
      degree:
        - CS: "D"
          rationale: "Implement a recursive binary search without list slicing"

- description: Run checks for Question 8 Part (c) with 'execexam' command and confirm correct exit code
  command: poetry run execexam . tests/ --verbose --mark "question_eight_part_c"
  objectives:
    LO5:
      degree:
        - CS: "D"
          rationale: "Implement an iterative binary search"

# }}}

# Program Analysis with Algorithm Engineering Tools {{{

# Question 1

# run a command: ruff check with default settings found in .ruff.toml file
- description: Ensure that Question 1 follows industry-standard rules using the command 'ruff check'
  command: poetry run ruff check questions/question_one.py

# run a command: ruff format with default settings found in .ruff.toml file
- description: Ensure that Question 1 adheres to an industry-standard format using the command 'ruff format'
  command: poetry run ruff format questions/question_one.py --check

# run a command: mypy with the default settings to confirm type alignment for all functions
- description: Ensure that Question 1 has correct type annotations using the command 'mypy'
  command: poetry run mypy questions/question_one.py

# run symbex: count functions with full type annotations
- description: Ensure that Question 1 has correct number of fully type annotated functions using the command 'symbex'
  check: MatchCommandFragment
  options:
    command: "poetry run symbex -s --fully-typed -f questions/question_one.py --count"
    fragment: 3
    count: 1
    exact: true

# run symbex: count functions with docstring-based documentation (note: does not count module docstring)
- description: Ensure that Question 1 has correct number of documented functions using the command 'symbex'
  check: MatchCommandFragment
  options:
    command: "poetry run symbex -s --documented -f questions/question_one.py --count"
    fragment: 3
    count: 1
    exact: true

# run symbex: confirm that there are no functions that are undocumented (i.e., do not have a docstring)
- description: Ensure that Question 1 has no undocumented functions using the command 'symbex'
  check: MatchCommandFragment
  options:
    command: "poetry run symbex -s --undocumented -f questions/question_one.py --count"
    fragment: 0
    count: 1
    exact: true

# Question 2

# run a command: ruff check with default settings found in .ruff.toml file
- description: Ensure that Question 2 follows industry-standard rules using the command 'ruff check'
  command: poetry run ruff check questions/question_two.py

# run a command: ruff format with default settings found in .ruff.toml file
- description: Ensure that Question 2 adheres to an industry-standard format using the command 'ruff format'
  command: poetry run ruff format questions/question_two.py --check

# run a command: mypy with the default settings to confirm type alignment for all functions
- description: Ensure that Question 2 has correct type annotations using the command 'mypy'
  command: poetry run mypy questions/question_two.py

# run symbex: count functions with full type annotations
- description: Ensure that Question 2 has correct number of fully type annotated functions using the command 'symbex'
  check: MatchCommandFragment
  options:
    command: "poetry run symbex -s --fully-typed -f questions/question_two.py --count"
    fragment: 3
    count: 1
    exact: true

# run symbex: count functions with docstring-based documentation (note: does not count module docstring)
- description: Ensure that Question 2 has correct number of documented functions using the command 'symbex'
  check: MatchCommandFragment
  options:
    command: "poetry run symbex -s --documented -f questions/question_two.py --count"
    fragment: 3
    count: 1
    exact: true

# run symbex: confirm that there are no functions that are undocumented (i.e., do not have a docstring)
- description: Ensure that Question 2 has no undocumented functions using the command 'symbex'
  check: MatchCommandFragment
  options:
    command: "poetry run symbex -s --undocumented -f questions/question_two.py --count"
    fragment: 0
    count: 1
    exact: true

# Question 3

# run a command: ruff check with default settings found in .ruff.toml file
- description: Ensure that Question 3 follows industry-standard rules using the command 'ruff check'
  command: poetry run ruff check questions/question_three.py

# run a command: ruff format with default settings found in .ruff.toml file
- description: Ensure that Question 3 adheres to an industry-standard format using the command 'ruff format'
  command: poetry run ruff format questions/question_three.py --check

# run a command: mypy with the default settings to confirm type alignment for all functions
- description: Ensure that Question 3 has correct type annotations using the command 'mypy'
  command: poetry run mypy questions/question_three.py

# run symbex: count functions with full type annotations
- description: Ensure that Question 3 has correct number of fully type annotated functions using the command 'symbex'
  check: MatchCommandFragment
  options:
    command: "poetry run symbex -s --fully-typed -f questions/question_three.py --count"
    fragment: 3
    count: 1
    exact: true

# run symbex: count functions with docstring-based documentation (note: does not count module docstring)
- description: Ensure that Question 3 has correct number of documented functions using the command 'symbex'
  check: MatchCommandFragment
  options:
    command: "poetry run symbex -s --documented -f questions/question_three.py --count"
    fragment: 3
    count: 1
    exact: true

# run symbex: confirm that there are no functions that are undocumented (i.e., do not have a docstring)
- description: Ensure that Question 3 has no undocumented functions using the command 'symbex'
  check: MatchCommandFragment
  options:
    command: "poetry run symbex -s --undocumented -f questions/question_three.py --count"
    fragment: 0
    count: 1
    exact: true

# Question 4

# run a command: ruff check with default settings found in .ruff.toml file
- description: Ensure that Question 4 follows industry-standard rules using the command 'ruff check'
  command: poetry run ruff check questions/question_four.py

# run a command: ruff format with default settings found in .ruff.toml file
- description: Ensure that Question 4 adheres to an industry-standard format using the command 'ruff format'
  command: poetry run ruff format questions/question_four.py --check

# run a command: mypy with the default settings to confirm type alignment for all functions
- description: Ensure that Question 4 has correct type annotations using the command 'mypy'
  command: poetry run mypy questions/question_four.py

# run symbex: count functions with full type annotations
- description: Ensure that Question 4 has correct number of fully type annotated functions using the command 'symbex'
  check: MatchCommandFragment
  options:
    command: "poetry run symbex -s --fully-typed -f questions/question_four.py --count"
    fragment: 4
    count: 1
    exact: true

# run symbex: count functions with docstring-based documentation (note: does not count module docstring)
- description: Ensure that Question 4 has correct number of documented functions using the command 'symbex'
  check: MatchCommandFragment
  options:
    command: "poetry run symbex -s --documented -f questions/question_four.py --count"
    fragment: 5
    count: 1
    exact: true

# run symbex: confirm that there are no functions that are undocumented (i.e., do not have a docstring)
- description: Ensure that Question 4 has no undocumented functions using the command 'symbex'
  check: MatchCommandFragment
  options:
    command: "poetry run symbex -s --undocumented -f questions/question_four.py --count"
    fragment: 0
    count: 1
    exact: true

# Question 5

# run a command: ruff check with default settings found in .ruff.toml file
- description: Ensure that Question 5 follows industry-standard rules using the command 'ruff check'
  command: poetry run ruff check questions/question_five.py

# run a command: ruff format with default settings found in .ruff.toml file
- description: Ensure that Question 5 adheres to an industry-standard format using the command 'ruff format'
  command: poetry run ruff format questions/question_five.py --check

# run a command: mypy with the default settings to confirm type alignment for all functions
- description: Ensure that Question 5 has correct type annotations using the command 'mypy'
  command: poetry run mypy questions/question_five.py

# run symbex: confirm that there are no functions that are undocumented (i.e., do not have a docstring)
- description: Ensure that Question 5 has no undocumented functions using the command 'symbex'
  check: MatchCommandFragment
  options:
    command: "poetry run symbex -s --undocumented -f questions/question_five.py --count"
    fragment: 0
    count: 1
    exact: true

# Question 6

# run a command: ruff check with default settings found in .ruff.toml file
- description: Ensure that Question 6 follows industry-standard rules using the command 'ruff check'
  command: poetry run ruff check questions/question_six.py

# run a command: ruff format with default settings found in .ruff.toml file
- description: Ensure that Question 6 adheres to an industry-standard format using the command 'ruff format'
  command: poetry run ruff format questions/question_six.py --check

# run a command: mypy with the default settings to confirm type alignment for all functions
- description: Ensure that Question 6 has correct type annotations using the command 'mypy'
  command: poetry run mypy questions/question_six.py

# run symbex: confirm that there are no functions that are undocumented (i.e., do not have a docstring)
- description: Ensure that Question 6 has no undocumented functions using the command 'symbex'
  check: MatchCommandFragment
  options:
    command: "poetry run symbex -s --undocumented -f questions/question_six.py --count"
    fragment: 0
    count: 1
    exact: true

# Question 7

# run a command: ruff check with default settings found in .ruff.toml file
- description: Ensure that Question 7 follows industry-standard rules using the command 'ruff check'
  command: poetry run ruff check questions/question_seven.py

# run a command: ruff format with default settings found in .ruff.toml file
- description: Ensure that Question 7 adheres to an industry-standard format using the command 'ruff format'
  command: poetry run ruff format questions/question_seven.py --check

# run a command: mypy with the default settings to confirm type alignment for all functions
- description: Ensure that Question 7 has correct type annotations using the command 'mypy'
  command: poetry run mypy questions/question_seven.py

# run symbex: confirm that there are no functions that are undocumented (i.e., do not have a docstring)
- description: Ensure that Question 7 has no undocumented functions using the command 'symbex'
  check: MatchCommandFragment
  options:
    command: "poetry run symbex -s --undocumented -f questions/question_seven.py --count"
    fragment: 0
    count: 1
    exact: true

# Question 8

# run a command: ruff check with default settings found in .ruff.toml file
- description: Ensure that Question 8 follows industry-standard rules using the command 'ruff check'
  command: poetry run ruff check questions/question_eight.py

# run a command: ruff format with default settings found in .ruff.toml file
- description: Ensure that Question 8 adheres to an industry-standard format using the command 'ruff format'
  command: poetry run ruff format questions/question_eight.py --check

# run a command: mypy with the default settings to confirm type alignment for all functions
- description: Ensure that Question 8 has correct type annotations using the command 'mypy'
  command: poetry run mypy questions/question_eight.py

# run symbex: confirm that there are no functions that are undocumented (i.e., do not have a docstring)
- description: Ensure that Question 8 has no undocumented functions using the command 'symbex'
  check: MatchCommandFragment
  options:
    command: "poetry run symbex -s --undocumented -f questions/question_eight.py --count"
    fragment: 0
    count: 1
    exact: true

# }}}
